{"version":3,"sources":["components/Header.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","position","MapboxGLMap","useState","map","setMap","mapContainer","useRef","useEffect","mapboxgl","accessToken","process","Map","container","current","center","zoom","on","labelLayerId","layers","getStyle","i","length","type","layout","id","addSource","addLayer","hoveredStateId","e","features","setFeatureState","source","hover","resize","initializeMap","ref","el","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88e25894.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst styles = {\r\n    height: '60px',\r\n    width: '100vw',\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    fontSize: '30px',\r\n  };\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div style={styles}>\r\n            <header>KART?</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"calc(100vh - 80px)\",\r\n  position: \"absolute\"\r\n};\r\n\r\nconst MapboxGLMap = () => {\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n        center: [10.408773,63.422091],\r\n        zoom: 30\r\n      });\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        const layers = map.getStyle().layers\r\n        let labelLayerId\r\n        for (var i = 0; i < layers.length; i++) {\r\n          if (layers[i].type === 'symbol' && layers[i].layout['text-field']) {\r\n            labelLayerId = layers[i].id;\r\n            break;\r\n          }\r\n        }\r\n        map.addSource('earthquakes', {\r\n          'type': 'geojson',\r\n          'data':\r\n          'https://docs.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson'\r\n          });\r\n           \r\n          map.addLayer(\r\n          {\r\n          'id': 'earthquakes-heat',\r\n          'type': 'heatmap',\r\n          'source': 'earthquakes',\r\n          'maxzoom': 9,\r\n          'paint': {\r\n          // Increase the heatmap weight based on frequency and property magnitude\r\n          'heatmap-weight': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['get', 'mag'],\r\n          0,\r\n          0,\r\n          6,\r\n          1\r\n          ],\r\n          // Increase the heatmap color weight weight by zoom level\r\n          // heatmap-intensity is a multiplier on top of heatmap-weight\r\n          'heatmap-intensity': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['zoom'],\r\n          0,\r\n          1,\r\n          9,\r\n          3\r\n          ],\r\n          // Color ramp for heatmap.  Domain is 0 (low) to 1 (high).\r\n          // Begin color ramp at 0-stop with a 0-transparancy color\r\n          // to create a blur-like effect.\r\n          'heatmap-color': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['heatmap-density'],\r\n          0,\r\n          'rgba(33,102,172,0)',\r\n          0.2,\r\n          'rgb(103,169,207)',\r\n          0.4,\r\n          'rgb(209,229,240)',\r\n          0.6,\r\n          'rgb(253,219,199)',\r\n          0.8,\r\n          'rgb(239,138,98)',\r\n          1,\r\n          'rgb(178,24,43)'\r\n          ],\r\n          // Adjust the heatmap radius by zoom level\r\n          'heatmap-radius': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['zoom'],\r\n          0,\r\n          2,\r\n          9,\r\n          20\r\n          ],\r\n          // Transition from heatmap to circle layer by zoom level\r\n          'heatmap-opacity': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['zoom'],\r\n          7,\r\n          1,\r\n          9,\r\n          0\r\n          ]\r\n          }\r\n          },\r\n          'waterway-label'\r\n          );\r\n           \r\n          map.addLayer(\r\n          {\r\n          'id': 'earthquakes-point',\r\n          'type': 'circle',\r\n          'source': 'earthquakes',\r\n          'minzoom': 7,\r\n          'paint': {\r\n          // Size circle radius by earthquake magnitude and zoom level\r\n          'circle-radius': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['zoom'],\r\n          7,\r\n          ['interpolate', ['linear'], ['get', 'mag'], 1, 1, 6, 4],\r\n          16,\r\n          ['interpolate', ['linear'], ['get', 'mag'], 1, 5, 6, 50]\r\n          ],\r\n          // Color circle by earthquake magnitude\r\n          'circle-color': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['get', 'mag'],\r\n          1,\r\n          'rgba(33,102,172,0)',\r\n          2,\r\n          'rgb(103,169,207)',\r\n          3,\r\n          'rgb(209,229,240)',\r\n          4,\r\n          'rgb(253,219,199)',\r\n          5,\r\n          'rgb(239,138,98)',\r\n          6,\r\n          'rgb(178,24,43)'\r\n          ],\r\n          'circle-stroke-color': 'white',\r\n          'circle-stroke-width': 1,\r\n          // Transition from heatmap to circle layer by zoom level\r\n          'circle-opacity': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['zoom'],\r\n          7,\r\n          0,\r\n          8,\r\n          1\r\n          ]\r\n          }\r\n          },\r\n          'waterway-label'\r\n          );\r\n          var hoveredStateId = null;\r\n        map.addLayer(\r\n          {\r\n          'id': '3d-buildings',\r\n          'source': 'composite',\r\n          'source-layer': 'building',\r\n          'filter': ['==', 'extrude', 'true'],\r\n          'type': 'fill-extrusion',\r\n          'minzoom': 15,\r\n          'paint': {\r\n          'fill-extrusion-color': '#aaa',\r\n           \r\n          // use an 'interpolate' expression to add a smooth transition effect to the\r\n          // buildings as the user zooms in\r\n          'fill-extrusion-height': [\r\n            'interpolate',\r\n            ['linear'],\r\n            ['zoom'],\r\n            15,\r\n            0,\r\n            15.05,\r\n            ['get', 'height']\r\n          ],\r\n          'fill-extrusion-base': [\r\n          'interpolate',\r\n          ['linear'],\r\n          ['zoom'],\r\n          15,\r\n          0,\r\n          15.05,\r\n          ['get', 'min_height']\r\n          ],\r\n          'fill-extrusion-opacity': 0.6\r\n          }\r\n          },\r\n          labelLayerId\r\n          );\r\n          map.addSource('states', {\r\n            'type': 'geojson',\r\n            'data':\r\n            'https://docs.mapbox.com/mapbox-gl-js/assets/us_states.geojson'\r\n            });\r\n             \r\n            // The feature-state dependent fill-opacity expression will render the hover effect\r\n            // when a feature's hover state is set to true.\r\n            map.addLayer({\r\n            'id': 'state-fills',\r\n            'type': 'fill',\r\n            'source': 'states',\r\n            'layout': {},\r\n            'paint': {\r\n            'fill-color': '#627BC1',\r\n            'fill-opacity': [\r\n            'case',\r\n            ['boolean', ['feature-state', 'hover'], false],\r\n            1,\r\n            0.5\r\n            ]\r\n            }\r\n            });\r\n             \r\n            map.addLayer({\r\n            'id': 'state-borders',\r\n            'type': 'line',\r\n            'source': 'states',\r\n            'layout': {},\r\n            'paint': {\r\n            'line-color': '#627BC1',\r\n            'line-width': 2\r\n            }\r\n            });\r\n             \r\n            // When the user moves their mouse over the state-fill layer, we'll update the\r\n            // feature state for the feature under the mouse.\r\n            map.on('mousemove', 'state-fills', function (e) {\r\n            if (e.features.length > 0) {\r\n            if (hoveredStateId) {\r\n            map.setFeatureState(\r\n            { source: 'states', id: hoveredStateId },\r\n            { hover: false }\r\n            );\r\n            }\r\n            hoveredStateId = e.features[0].id;\r\n            map.setFeatureState(\r\n            { source: 'states', id: hoveredStateId },\r\n            { hover: true }\r\n            );\r\n            }\r\n            });\r\n             \r\n            // When the mouse leaves the state-fill layer, update the feature state of the\r\n            // previously hovered feature.\r\n            map.on('mouseleave', 'state-fills', function () {\r\n            if (hoveredStateId) {\r\n            map.setFeatureState(\r\n            { source: 'states', id: hoveredStateId },\r\n            { hover: false }\r\n            );\r\n            }\r\n            hoveredStateId = null;\r\n            });\r\n        map.resize();\r\n      });\r\n    };\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n  }, [map]);\r\n\r\n  return <div ref={el => (mapContainer.current = el)} style={styles} />;\r\n};\r\n\r\nexport default MapboxGLMap;","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport MapboxGLMap from \"./components/MapboxGLMap\";\r\n\r\nconst styles = {\r\n  overflow:'hidden'\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={styles}>\r\n      <Header/>\r\n      <MapboxGLMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}